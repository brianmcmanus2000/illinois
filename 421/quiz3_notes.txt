Regexes:
let id_char = numeric | alpha | "'" | "_"
let hexadec = numeric | ['a' - 'f']
let binary = '0' | '1'
let open_comment = "(*"
let close_comment = "*)"
let whitespace = [' ' '\t' '\n']

Tokens:
all easy except:
| numeric+ as s { INT (int_of_string s) }
| ("0b"(binary)+) as s {INT (int_of_string s)}
| ("0x"(hexadec)+) as s { INT (int_of_string s) }
| ((numeric+)'.'(numeric*)('e'(numeric)+)?) as s       { FLOAT (float_of_string s) }
| "(" whitespace* ")"    { UNIT }
| "[" whitespace* "]"    { NIL }
| (lower_case (id_char*)) as s     { IDENT s }
| open_comment       { comment 1 lexbuf }
| close_comment      { raise (Failure "unmatched closed comment") }
| "\""    { string "" lexbuf }
| ("//"([^'\n']*))	{ token lexbuf }

Comments:
and comment count = parse
   open_comment        { comment (1 + count) lexbuf }
 | close_comment       { match count with 0 -> raise (Failure "Solution error")
                         | 1 -> token lexbuf
                         | n -> comment (n - 1) lexbuf
 }
 | eof             { raise (Failure "unmatched open comment") }
 | _                   { comment count lexbuf }

String:
and string start_string = parse
   "\""     { STRING start_string }
 | "\\"	    { escaped_string start_string lexbuf }
 | _ as c   { string (start_string ^ (String.make 1 c)) lexbuf }

 Escaped string:
 and escaped_string start_string = parse
 | "\\"   { string (start_string ^ "\\") lexbuf }
 | "\""   { string (start_string ^ "\"") lexbuf }
 | "t"    { string (start_string ^ "\t") lexbuf }
 | "n"    { string (start_string ^ "\n") lexbuf }
 | "r"    { string (start_string ^ "\r") lexbuf }
 | "b"    { string (start_string ^ "\b") lexbuf }
 | [' ' '\t']  { escaped_string start_string lexbuf }
 | '\n'   { stringwhitespace start_string lexbuf }
 | (['0' - '1']['0' - '9']['0' - '9'] as ch) { string (start_string ^ (String.make 1 (char_of_int (int_of_string ch)))) lexbuf } 
 | (['2']['0' - '4']['0' - '9'] as ch) { string (start_string ^ (String.make 1 (char_of_int (int_of_string ch)))) lexbuf } 
 | (['2']['5']['0' - '5'] as ch) { string (start_string ^ (String.make 1 (char_of_int (int_of_string ch)))) lexbuf } 

 | "\n"         { stringwhitespace start_string lexbuf }

String whitespace:
and stringwhitespace start_string = parse
    [' ' '\t']  { stringwhitespace start_string lexbuf }
 | "\""     { STRING start_string }
 | "\\"	    { escaped_string start_string lexbuf }
 | _ as c   { string (start_string ^ (String.make 1 c)) lexbuf }

 